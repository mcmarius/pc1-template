name: C CI

on:
  push:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: [main] # NOTE: replace/update with appropriate branch name(s)

env:
  EXECUTABLE_NAME: "main"
  INPUT_FILENAME: "tastatura.txt"
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  CSFML_VER: "2.5.1"
  SFML_VER: "2.5.1"

defaults:
  run:
    # Use a bash shell, so we can use the same syntax for environment variable
    # access regardless of the host operating system
    # https://github.com/saxbophone/CPP20-Cross-Platform-Template
    shell: bash

jobs:
  cppcheck:
    name: Cppcheck
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Install cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends cppcheck

      - name: Run cppcheck
        run: |
          cppcheck --enable=all \
                   -i"${BUILD_DIR}" --suppress='*:"${BUILD_DIR}"/*' \
                   -i"${EXT_DIR}" --suppress='*:"${EXT_DIR}"/*' \
                   --suppress=missingIncludeSystem \
                   --suppress=unmatchedSuppression \
                   --error-exitcode=1 \
                   .


  build-and-run:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    permissions:
      contents: write
    env:
      CC: ${{ matrix.cc }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            cc: gcc-12
            name: Ubuntu 22 GCC 12
            runs_valgrind: true
          - os: ubuntu-22.04
            cc: clang-14
            name: Ubuntu 22 Clang 14
            flags: -stdlib=libc++
          - os: ubuntu-20.04
            cc: clang-12
            name: Ubuntu 20 Clang 12
            flags: -stdlib=libc++

          # - os: macos-12
          #   cc: clang
          #   name: macOS 12 Apple Clang 14
          #   flags: -stdlib=libc++
          # - os: macos-12
          #   cc: gcc-11
          #   name: macOS 12 GCC 11

          - os: windows-2022
            cc: gcc
            name: Windows 2022 MinGW GCC 11

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Update Linux deps
        if: runner.os == 'Linux'
        run: sudo apt-get update

      # - name: Install Valgrind
      #   if: runner.os == 'Linux' && matrix.runs_valgrind == true
      #   run: |
      #     sudo apt-get install --no-install-recommends valgrind

      - name: Install SFML/CSFML (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install --no-install-recommends \
            libsfml-dev libcsfml-dev \
            libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev

      - name: Cache CSFML
        uses: actions/cache@v3
        id: cache-csfml
        if: runner.os == 'Windows'
        with:
          path: csfml
          key: ${{ runner.os }}-csfml-${{ env.CSFML_VER }}

      - name: Download CSFML (Windows)
        uses: suisei-cn/actions-download-file@v1.4.0
        if: runner.os == 'Windows' && steps.cache-csfml.outputs.cache-hit != 'true'
        with:
          url: "https://www.sfml-dev.org/files/CSFML-${{ env.CSFML_VER }}-windows-64-bit.zip"
          target: csfml_dir/
          filename: csfml.zip

      # temp workaround, there is a bug in xcode linker 14.0
      - name: Setup Xcode version
        if: runner.os == 'macOS' && startsWith(matrix.cc, 'gcc')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '13.4.1'

      - name: Set timestamp and zip name
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
          # use the full name as prefix: {user_name}_{repo_name} (replace / with _)
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ matrix.os }}_${{ matrix.cc }}" | sed 's|/|_|')" >> ${GITHUB_ENV}
          # or use only the repo name (github does not have a predefined environment variable for this)
          # the regex splits by / and keeps everything after / without the / character
          # echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ matrix.os }}_${{ matrix.cc }}" | sed -E 's|.+/(.+)|\1|')" >> ${GITHUB_ENV}

      ########################################################################

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          "${CC}" --version
          "${CC}" *.c \
            -Wall -Wextra -Werror -g \
            -std=c11 \
            ${{ matrix.flags }} \
            -I. \
            -isystem ext/include/rlutil \
            -o "${EXECUTABLE_NAME}" \
            -lm \
            -lcsfml-graphics -lcsfml-window -lcsfml-system \
            -Wl,-rpath="\$ORIGIN/libs",--disable-new-dtags
          mkdir -p libs
          ldd "./${EXECUTABLE_NAME}" | grep sfml | sed -E "s|.*(/lib/.*) \(.*|\1|"| xargs -I% cp -L % libs

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          ls
          echo "--------"
          ls csfml_dir
          7z x csfml_dir/csfml.zip -ocsfml
          "${CC}" --version
          "${CC}" *.c \
            -Wall -Wextra -Werror -g \
            -std=c11 \
            ${{ matrix.flags }} \
            -I. \
            -Icsfml/include \
            -Iext/include/rlutil \
            -o "${EXECUTABLE_NAME}" \
            -Lcsfml/lib/gcc \
            -lm \
            -lcsfml-graphics -lcsfml-window -lcsfml-system

      # - name: Run
      #   if: runner.os != 'Windows'
      #   run: |
      #     cat "${INPUT_FILENAME}" | tr -d '\r' | ./"${EXECUTABLE_NAME}"

      # - name: Run with Valgrind
      #   if: runner.os == 'Linux' && matrix.runs_valgrind == true
      #   run: |
      #     # remove --show-leak-kinds=all (and --track-origins=yes) if there are many leaks in external libs
      #     cat "${INPUT_FILENAME}" | tr -d '\r' | valgrind \
      #       --leak-check=full \
      #       --show-leak-kinds=all \
      #       --track-origins=yes \
      #       --error-exitcode=1 \
      #       ./"${EXECUTABLE_NAME}"

      - name: Copy project files
        run: |
          mkdir ${{ env.ZIP_NAME }}
          cp ./"${EXECUTABLE_NAME}" \
             "${INPUT_FILENAME}" \
             Digital7Mono-B1g5.ttf \
             ${{ env.ZIP_NAME }}

      - name: Copy deps (Linux)
        if: runner.os == 'Linux'
        run: |
          cp -r libs/ ${{ env.ZIP_NAME }}/
          chmod +x ${{ env.ZIP_NAME }}/"${EXECUTABLE_NAME}"

      - name: Copy deps (Windows)
        if: runner.os == 'Windows'
        run: |
          cp csfml/bin/*.dll ${{ env.ZIP_NAME }}/

      ########################################################################

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cc == 'gcc'
        run: |
          cp "$(which libstdc++-6.dll)" \
            "$(which libgcc_s_seh-1.dll)" \
            "$(which libwinpthread-1.dll)" \
            ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_NAME }}_${{ env.TIMESTAMP }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 30

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> ${GITHUB_ENV}

      - name: Add tag to folder name
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mv ${{ env.ZIP_NAME }} ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}
          filename: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip
