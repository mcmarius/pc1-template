
name: Continuous Integration

on:
  push:
    branches: [main] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: [main] # NOTE: replace/update with appropriate branch name(s)

env:
  EXECUTABLE_NAME: "main"
  INPUT_FILENAME: "tastatura.txt"
  BUILD_DIR: "build"
  EXT_DIR: "ext"

defaults:
  run:
    # Use a bash shell, so we can use the same syntax for environment variable
    # access regardless of the host operating system
    # https://github.com/saxbophone/CPP20-Cross-Platform-Template
    shell: bash

jobs:
  cppcheck:
    name: Cppcheck
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Install cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends cppcheck

      - name: Run cppcheck
        run: |
          cppcheck --enable=all \
                   -i"${BUILD_DIR}" --suppress='*:"${BUILD_DIR}"/*' \
                   -i"${EXT_DIR}" --suppress='*:"${EXT_DIR}"/*' \
                   --suppress=missingIncludeSystem \
                   --suppress=unmatchedSuppression \
                   --error-exitcode=1 \
                   .


  build-and-run:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    permissions:
      contents: write

    env:
      CC: ${{ matrix.cc }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            cc: clang-14
            name: Ubuntu 22 Clang 14
            flags: -stdlib=libc++
          - os: ubuntu-22.04
            cc: gcc-12
            name: Ubuntu 22 GCC 12

          - os: macos-12
            cc: clang
            name: macOS 12 Apple Clang 14
          - os: macos-12
            cc: gcc-11
            name: macOS 12 GCC 11

          - os: windows-2022
            cc: cl
            name: Windows 2022 MSVC 19.33
          - os: windows-2022
            cc: gcc
            name: Windows 2022 MinGW GCC 11

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Valgrind
        if: runner.os == 'Linux' && startsWith(matrix.cc, 'gcc')
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends valgrind

      # temp workaround, there is a bug in xcode linker 14.0
      - name: Setup Xcode version
        if: runner.os == 'macOS' && startsWith(matrix.cc, 'gcc')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '13.4.1'

      - name: Build
        if: matrix.cc != 'cl'
        run: |
          "${CC}" --version
          "${CC}" *.c \
            -Wall -Wextra -pedantic -Werror -g \
            -std=c11 \
            ${{ matrix.flags }} \
            -I. \
            -o "${EXECUTABLE_NAME}" \
            -lm

      - name: Build (MSVC)
        if: matrix.cc == 'cl'
        run: |
          env
          vcver=$(cat "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt")
          CC="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/${vcver}/bin/Hostx64/x64/cl.exe"
          "${CC}"
          cd "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/" && vcvars64.bat && \
          cd ${GITHUB_WORKSPACE} && \
          "${CC}" *.c -W4 -WX -permissive- \
            -wd4244 -wd4267 -wd4996 \
            -std:c11 \
            -external:anglebrackets -external:W0 \
            -link -out:"${EXECUTABLE_NAME}".exe

      - name: Run
        if: runner.os != 'Windows'
        run: |
          cat "${INPUT_FILENAME}" | tr -d '\r' | ./"${EXECUTABLE_NAME}"

      - name: Run (MSVC)
        if: matrix.cc == 'cl'
        run: |
          cat "${INPUT_FILENAME}" | ./"${EXECUTABLE_NAME}".exe

      - name: Run with Valgrind
        if: runner.os == 'Linux' && startsWith(matrix.cc, 'gcc')
        run: |
          # remove --show-leak-kinds=all (and --track-origins=yes) if there are many leaks in external libs
          cat "${INPUT_FILENAME}" | tr -d '\r' | valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./"${EXECUTABLE_NAME}"

      - name: Set timestamp and zip name
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
          # use the full name as prefix: {user_name}_{repo_name} (replace / with _)
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ matrix.os }}_${{ matrix.cxx }}" | sed 's|/|_|')" >> ${GITHUB_ENV}
          # or use only the repo name (github does not have a predefined environment variable for this)
          # the regex splits by / and keeps everything after / without the / character
          # echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ matrix.os }}_${{ matrix.cxx }}" | sed -E 's|.+/(.+)|\1|')" >> ${GITHUB_ENV}

      - name: Copy project files
        run: |
          mkdir ${{ env.ZIP_NAME }}
          cp ./"${EXECUTABLE_NAME}" \
             "${INPUT_FILENAME}" \
             ${{ env.ZIP_NAME }}


      - name: Copy missing dlls
        if: runner.os == 'Windows' && matrix.cc == 'cl'
        run: |
          # runtime debug DLLs
          cp "$(which ucrtbased.dll)" \
              "$(which VCRUNTIME140_1D.dll)" \
              "$(which MSVCP140D.dll)" \
              "$(which VCRUNTIME140D.dll)" \
              bin/

          # runtime release DLLs
          cp "$(which ucrtbase.dll)" \
              "$(which VCRUNTIME140_1.dll)" \
              "$(which MSVCP140.dll)" \
              "$(which VCRUNTIME140.dll)" \
              bin/

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        # static linking might not work with MinGW, might be easier this way
        run: |
          cd gcc/mingw64/bin
          cp libstdc++-6.dll \
            libgcc_s_seh-1.dll \
            libwinpthread-1.dll \
            ${GITHUB_WORKSPACE}/bin

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_NAME }}_${{ env.TIMESTAMP }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 10

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> ${GITHUB_ENV}

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: ${{ env.ZIP_NAME }}
          filename: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip
